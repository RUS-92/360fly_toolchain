Okay, so this is how I go from a bunch of 4 minute chapters in spherical to equirectangular:

ONE-TIME:
Generate map from https://github.com/prouast/equirectangular-remap/blob/master/projection.c using this command:

./project -x fly360_x.pgm -y fly360_y.pgm -h 2880 -w 2880 -r 1440 -c 2880 -m equirectangular --verbose
-> TODO: Investigate the 360Fly Director max of 3840x1920

install ffmpeg, obvs

Clone this git repo: https://github.com/google/spatial-media
Make sure you have Python 2.7 installed

Now, the script will run ffmpeg on EACH FILE:

ffmpeg -i <INPUT_FOLDER>/FLY00101.MP4 -i fly360_x.pgm -i fly360_y.pgm -lavfi remap <OUTPUT_FOLDER>/FLY00101-equi.MP4

But then run ffmpeg on each file, AGAIN so that Davinci will import it:
ffmpeg -y -i <INPUT>.MP4 -c:v mpeg4 -force_key_frames "expr:gte(t,n_forced*1)" -r ntsc-film -b:v 250000k -c:a pcm_s16le <OUTPUT>.MOV

And this step adds the blindspot in at the same time (arguments omitted here).

Then run the python script to add in the spherical metadata:
python ~/git_repos/spatial-media/spatialmedia -i <INPUT file name> <OUTPUT file name>

The fully developed, and working, script is in 3840x1920 folder. After the script runs, you probably want to delete all but the finished, injected videos. I'm able to set this loose on a directory of videos copied from the 360Fly and let it run overnight, then wake up to a set of finished videos, ready to edit.

Personally, the next thing I do is open Garmin VIRB Edit and import all the videos and the GPS data and do gauge overlays. Then I render that, and the output from Garmin VIRB Edit is what actually goes into Davinci Resolve for timeline editing, adding music, text, noise reduction, etc.
